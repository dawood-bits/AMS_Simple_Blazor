@page "/employees"
@inject HttpClient Http
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms



<h3>Employee Management</h3>

<hr />

<h4>@(isEditMode ? "Edit Employee" : "Register New Employee")</h4>

<EditForm Model="@employeeModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-2">
        <div class="col-md-6">
            <label>Employee Code:</label>
            <InputText class="form-control" @bind-Value="employeeModel.EmployeeCode" disabled="@isEditMode" />
            <ValidationMessage For="@(() => employeeModel.EmployeeCode)" />
        </div>
        <div class="col-md-6">
            <label>Full Name:</label>
            <InputText class="form-control" @bind-Value="employeeModel.FullName" />
            <ValidationMessage For="@(() => employeeModel.FullName)" />
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-6">
            <label>Department:</label>
            <InputText class="form-control" @bind-Value="employeeModel.Department" />
        </div>
        <div class="col-md-6">
            <label>Designation:</label>
            <InputText class="form-control" @bind-Value="employeeModel.Designation" />
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-6">
            <label>Email:</label>
            <InputText class="form-control" @bind-Value="employeeModel.Email" />
            <ValidationMessage For="@(() => employeeModel.Email)" />
        </div>
        <div class="col-md-6">
            <label>Upload Photo:</label>
            <InputFile OnChange="HandlePhotoUpload" accept="image/*" />
            @if (!string.IsNullOrEmpty(employeeModel.PhotoPath))
            {
                <img src="@employeeModel.PhotoPath" alt="Photo" width="80" class="mt-2" />
            }
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-6">
            <label>Upload Fingerprint Template:</label>
            <InputFile OnChange="HandleFingerprintUpload" accept=".dat,.bin" />
            @if (!string.IsNullOrEmpty(employeeModel.FingerprintTemplate))
            {
                <small class="text-success">Fingerprint template uploaded</small>
            }
        </div>
        <div class="col-md-6">
            <label>Upload Face Template:</label>
            <InputFile OnChange="HandleFaceUpload" accept=".dat,.bin" />
            @if (!string.IsNullOrEmpty(employeeModel.FaceTemplate))
            {
                <small class="text-success">Face template uploaded</small>
            }
        </div>
    </div>

    <div class="mt-2">
        <button class="btn btn-primary" type="submit">@(isEditMode ? "Update Employee" : "Add Employee")</button>
        @if (isEditMode)
        {
            <button class="btn btn-secondary ms-2" type="button" @onclick="CancelEdit">Cancel</button>
        }
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(formMessage))
{
    <div class="alert alert-success mt-2">@formMessage</div>
}

<hr />

<h4>All Employees</h4>

@if (employees == null)
{
    <p>Loading employees...</p>
}
else if (!employees.Any())
{
    <p>No employees found.</p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Employee Code</th>
                <th>Full Name</th>
                <th>Department</th>
                <th>Designation</th>
                <th>Email</th>
                <th>Photo</th>
                <th>Fingerprint</th>
                <th>Face Template</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in employees)
            {
                <tr>
                    <td>@emp.EmployeeCode</td>
                    <td>@emp.FullName</td>
                    <td>@emp.Department</td>
                    <td>@emp.Designation</td>
                    <td>@emp.Email</td>

                    <td>
                        @if (!string.IsNullOrEmpty(emp.PhotoPath))
                        {
                            <img src="@emp.PhotoPath" alt="Photo" width="50" height="50"
                                 class="rounded shadow-sm" style="cursor:pointer;"
                                 title="Click to view photo"
                                 @onclick="@( () => ShowFullImage(emp.PhotoPath!, $"Photo of {emp.FullName}") )" />
                        }
                        else
                        {
                            <span class="badge bg-secondary">No Photo</span>
                        }
                    </td>

                    <td>
                        @if (!string.IsNullOrEmpty(emp.FingerprintTemplate))
                        {
                            <img src="@emp.FingerprintTemplate" alt="Fingerprint" width="50" height="50"
                                 class="border rounded shadow-sm" style="cursor:pointer;"
                                 title="Click to view fingerprint"
                                 @onclick="@( () => ShowFullImage(emp.FingerprintTemplate!, $"Fingerprint of {emp.FullName}") )" />
                        }
                        else
                        {
                            <span class="badge bg-secondary">No Fingerprint</span>
                        }
                    </td>

                    <td>
                        @if (!string.IsNullOrEmpty(emp.FaceTemplate))
                        {
                            <img src="@emp.FaceTemplate" alt="Face Template" width="50" height="50"
                                 class="border rounded shadow-sm" style="cursor:pointer;"
                                 title="Click to view face template"
                                 @onclick="@( () => ShowFullImage(emp.FaceTemplate!, $"Face Template of {emp.FullName}") )" />
                        }
                        else
                        {
                            <span class="badge bg-secondary">No Face</span>
                        }
                    </td>

                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => EditEmployee(emp)">Edit</button>
                        <button class="btn btn-sm btn-danger ms-1" @onclick="() => DeleteEmployee(emp.EmployeeCode)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (!string.IsNullOrEmpty(fullImageUrl))
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@fullImageTitle</h5>
                        <button type="button" class="btn-close" @onclick="CloseFullImage"></button>
                    </div>
                    <div class="modal-body text-center">
                        <img src="@fullImageUrl" alt="@fullImageTitle" class="img-fluid" />
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private string? fullImageUrl;
    private string? fullImageTitle;

    private void ShowFullImage(string url, string title)
    {
        fullImageUrl = url;
        fullImageTitle = title;
    }

    private void CloseFullImage()
    {
        fullImageUrl = null;
        fullImageTitle = null;
    }

    private List<Employee>? employees;
    private Employee employeeModel = new();
    private string? formMessage;
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync() => await LoadEmployees();

    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<Employee>>("http://localhost:5158/api/employees");
        }
        catch
        {
            employees = new List<Employee>();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response;
            if (isEditMode)
            {
                response = await Http.PutAsJsonAsync($"http://localhost:5158/api/employees/{employeeModel.EmployeeCode}", employeeModel);
                formMessage = response.IsSuccessStatusCode ? "Employee updated successfully!" : "Failed to update employee.";
                isEditMode = false;
            }
            else
            {
                response = await Http.PostAsJsonAsync("http://localhost:5158/api/employees", employeeModel);
                formMessage = response.IsSuccessStatusCode ? "Employee added successfully!" : "Failed to add employee.";
            }

            employeeModel = new Employee();
            await LoadEmployees();
        }
        catch (Exception ex)
        {
            formMessage = $"Error: {ex.Message}";
        }
    }

    private void EditEmployee(Employee emp)
    {
        employeeModel = new Employee
        {
            EmployeeCode = emp.EmployeeCode,
            FullName = emp.FullName,
            Department = emp.Department,
            Designation = emp.Designation,
            Email = emp.Email,
            PhotoPath = emp.PhotoPath,
            FingerprintTemplate = emp.FingerprintTemplate,
            FaceTemplate = emp.FaceTemplate
        };
        isEditMode = true;
        formMessage = null;
    }

    private void CancelEdit()
    {
        employeeModel = new Employee();
        isEditMode = false;
        formMessage = null;
    }

    private async Task DeleteEmployee(string employeeCode)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5158/api/employees/{employeeCode}");
            formMessage = response.IsSuccessStatusCode ? "Employee deleted successfully!" : "Failed to delete employee.";
            await LoadEmployees();
        }
        catch (Exception ex)
        {
            formMessage = $"Error: {ex.Message}";
        }
    }

    // File uploads
    private async Task HandlePhotoUpload(InputFileChangeEventArgs e) =>
        await UploadFile(e, "upload-photo", p => employeeModel.PhotoPath = p);

    private async Task HandleFingerprintUpload(InputFileChangeEventArgs e) =>
        await UploadFile(e, "upload-fingerprint", p => employeeModel.FingerprintTemplate = p);

    private async Task HandleFaceUpload(InputFileChangeEventArgs e) =>
        await UploadFile(e, "upload-face", p => employeeModel.FaceTemplate = p);

    private async Task UploadFile(InputFileChangeEventArgs e, string endpoint, Action<string> setPath)
    {
        var file = e.File;
        if (file != null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(5 * 1024 * 1024)); // 5MB max
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            var response = await Http.PostAsync($"http://localhost:5158/api/employees/{endpoint}", content);
            if (response.IsSuccessStatusCode)
            {
                var path = await response.Content.ReadAsStringAsync();
                setPath(path);
            }
        }
    }

    public class Employee
    {
        [Required(ErrorMessage = "Employee code is required")]
        public string EmployeeCode { get; set; } = string.Empty;

        [Required(ErrorMessage = "Full name is required")]
        public string FullName { get; set; } = string.Empty;

        public string? Department { get; set; }
        public string? Designation { get; set; }

        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string? Email { get; set; }

        public string? PhotoPath { get; set; }
        public string? FingerprintTemplate { get; set; }
        public string? FaceTemplate { get; set; }
    }
}
